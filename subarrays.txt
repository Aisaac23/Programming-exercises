Contiguous Subarrays
You are given an array a of N integers. For each index i, you are required to determine the number of contiguous subarrays that fulfills the following conditions:
The value at index i must be the maximum element in the contiguous subarrays, and
These contiguous subarrays must either start from or end with i.
Signature
int[] countSubarrays(int[] arr)
Input
Array a is a non-empty list of unique integers that range between 1 to 10,000,000,000
Size N is between 1 and 1,000,000
Output
An array where each index i contains an integer denoting the maximum number of contiguous subarrays of a[i]
Example:
a = [3, 4, 1, 6, 2]
output = [1, 3, 1, 5, 1]
Explanation:
For index 0 - [3] is the only contiguous subarray that starts (or ends) with 3, and the maximum value in this subarray is 3.
For index 1 - [4], [3, 4], [4, 1]
For index 2 -[1]
For index 3 - [6], [6, 2], [1, 6], [4, 1, 6], [3, 4, 1, 6]
For index 4 - [2]
So, the answer for the above input is [1, 3, 1, 5, 1]






import math
# Add any extra import statements you may need here

# Add any helper functions you may need here

def count_subarrays(arr):
	subarray = []
	output = []
	for item in arr:
		output.append(0)
    	
	for indexA in range( len(arr) ):
		indexC = 0
		for indexB in range( 0, len(arr) ):
				if indexB <= indexA:
					subarray = arr[ indexB:indexA+1 ]
				else:
					subarray = arr[ indexA:indexB+1 ]
				indexValue = arr[ indexA ]
				subMax = max( subarray )
				if( subMax == indexValue and ( subarray[0] == indexValue or subarray[-1] == indexValue ) ):
					output[indexA] = output[indexA] + 1
                
	return output
